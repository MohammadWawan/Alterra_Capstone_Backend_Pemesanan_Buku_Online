openapi: '3.0.2'
info:
  title: Books Orders
  description: Books Orders is an application for ordering books online
  termsOfService: http://swagger.io/terms/
  contact:
    email : mohammadwawan.24@gmail.com
  version: '1.0'
externalDocs:
  description: :Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://api.server.test/v1
    description: SwaggerHub API Auto Mocking
  - url: http://localhost:8000/
tags:
  - name: users
    description: Everything about users
  - name: karyawans
    description: Everything about karyawans
  - name: books
    description: Everything about books (third-party)
  - name: categories
    description: Everything about categories of books
  - name: descriptions
    description: Everything about descriptions of books
  - name: payment_methods
    description: Everything about payment_methods
  - name: transactions
    description: Everything about transactions
  - name: transaction_details
    description: Everything about transaction_details
  - name: wishlists
    description: Everything about wishlists of books    
paths:
  /books:
    get:
      tags:
        - books
      summary: List all books
      parameters:
        - name: sort
          in: query
          description: Sort salaries asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: limit
          in: query
          description: Limit book result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset book result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - books
      summary: Create new book
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /books/{id}:
    get:
      tags:
        - books
      summary: Detail book
      parameters:
        - name: id
          in: path
          description: ID of book to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - books
      summary: Update book data
      parameters:
        - name: id
          in: path
          description: ID of book to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - books
      summary: Delete book by id
      parameters:
        - name: id
          in: path
          description: ID of book to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /users:
    get:
      tags:
        - users
      summary: List all users
      parameters:
        - name: sort
          in: query
          description: Sort users asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: limit
          in: query
          description: Limit users result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset users result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        '200':
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - users
      summary: Create new user
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /users/{id}:

    get:  
      tags:
        - users
      summary: Destroy user by id
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - users
      summary: Update user data
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - users
      summary: Destroy user by id
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /categories:
    get:
      tags:
        - categories
      summary: List all categories
      parameters:
        - name: sort
          in: query
          description: Sort categories asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: limit
          in: query
          description: Limit categories result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset categories result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        '200':
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - categories
      summary: Create new category
      requestBody:
        $ref: '#/components/requestBodies/Category'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /categories/{id}:

    get:  
      tags:
        - categories
      summary: Destroy category by id
      parameters:
        - name: id
          in: path
          description: ID of category to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - categories
      summary: Update category data
      parameters:
        - name: id
          in: path
          description: ID of category to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Category'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - categories
      summary: Destroy category by id
      parameters:
        - name: id
          in: path
          description: ID of category to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []      
  /descriptions:
    get:
      tags:
        - descriptions
      summary: List all descriptions
      parameters:
        - name: sort
          in: query
          description: Sort descriptions asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: limit
          in: query
          description: Limit descriptions result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset descriptions result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        '200':
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - descriptions
      summary: Create new description
      requestBody:
        $ref: '#/components/requestBodies/Description'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /descriptions/{id}:
    get:  
      tags:
        - descriptions
      summary: Destroy description by id
      parameters:
        - name: id
          in: path
          description: ID of description to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - descriptions
      summary: Update description data
      parameters:
        - name: id
          in: path
          description: ID of description to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Description'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - descriptions
      summary: Destroy description by id
      parameters:
        - name: id
          in: path
          description: ID of description to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []  
  /payment_methods:
    get:
      tags:
        - payment_methods
      summary: List all payment_methods
      parameters:
        - name: sort
          in: query
          description: Sort payment_methods asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortBy
          in: query
          description: Sort by payment_methods
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - name
              - nominal
              - target_date
              - priority
              - is_done
        - name: limit
          in: query
          description: Limit payment_methods result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset payment_methods result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - payment_methods
      summary: Create new payment_methods
      requestBody:
        $ref: '#/components/requestBodies/Payment_method'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /payment_methods/{id}:
    get:
      tags:
        - payment_methods
      summary: Detail payment_methods
      parameters:
        - name: id
          in: path
          description: ID of payment_method to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - payment_methods
      summary: Update payment_method data
      parameters:
        - name: id
          in: path
          description: ID of payment_method to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Payment_method'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - payment_methods
      summary: Destroy payment_method by id
      parameters:
        - name: id
          in: path
          description: ID of payment_method to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /wishlists:
    get:
      tags:
        - wishlists
      summary: List all wishlists
      parameters:
        - name: sort
          in: query
          description: Sort wishlists asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortBy
          in: query
          description: Sort by wishlists
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - name
              - nominal
              - target_date
              - priority
              - is_done
        - name: limit
          in: query
          description: Limit wishlists result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset users result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - wishlists
      summary: Create new wishlists
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /wishlists/{id}:
    get:
      tags:
        - wishlists
      summary: Detail wishlist
      parameters:
        - name: id
          in: path
          description: ID of wishlist to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - wishlists
      summary: Update wishlist data
      parameters:
        - name: id
          in: path
          description: ID of wishlist to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - wishlists
      summary: Destroy wishlist by id
      parameters:
        - name: id
          in: path
          description: ID of wishlist to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /transactions:
    get:
      tags:
        - transactions
      summary: List all transactions
      parameters:
        - name: sort
          in: query
          description: Sort transactions asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortBy
          in: query
          description: Sort by transactions
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - name
              - nominal
              - target_date
              - priority
              - is_done
        - name: limit
          in: query
          description: Limit transactions result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset transactions result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - transactions
      summary: Create new transactions
      requestBody:
        $ref: '#/components/requestBodies/Transaction'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /transactions/{id}:
    get:
      tags:
        - transactions
      summary: Detail transactions
      parameters:
        - name: id
          in: path
          description: ID of transaction to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - transactions
      summary: Update transaction data
      parameters:
        - name: id
          in: path
          description: ID of transaction to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Transaction'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - transactions
      summary: Destroy transaction by id
      parameters:
        - name: id
          in: path
          description: ID of transaction to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /transaction_details:
    get:
      tags:
        - transaction_details
      summary: List all transaction_details
      parameters:
        - name: sort
          in: query
          description: Sort transaction_details asc/desc
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: sortBy
          in: query
          description: Sort by transaction_details
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - name
              - nominal
              - target_date
              - priority
              - is_done
        - name: limit
          in: query
          description: Limit transaction_details result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Offset transaction_details result
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    post:
      tags:
        - transaction_details
      summary: Create new transaction_details
      requestBody:
        $ref: '#/components/requestBodies/Transaction_Detail'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
  /transaction_details/{id}:
    get:
      tags:
        - transaction_details
      summary: Detail transaction_details
      parameters:
        - name: id
          in: path
          description: ID of transaction_detail to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    put:
      tags:
        - transaction_details
      summary: Update transaction_detail data
      parameters:
        - name: id
          in: path
          description: ID of transaction_detail to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Transaction_Detail'
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []
    delete:
      tags:
        - transaction_details
      summary: Destroy transaction_detail by id
      parameters:
        - name: id
          in: path
          description: ID of transaction_detail to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        "405":
          description: Invalid input
        "200":
          description: Success
      security:
        - api_key: []      
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        password:
          type: string
        is_karyawan:
          type: integer
          description: 0 = user / 1 = karyawan
          default: 0
        email:
          type: string
        address:
          type: string
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name_category:
          type: string
      xml:
        name: Category  
    Description:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
      xml:
        name: Description
    RefreshToken:
      type: object
      properties:
        api_key:
          type: string
      xml:
        name: RefeshToken       
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        price:
          type: integer
        author:
          type: string
        publisher:
          type: string    
      xml:
        name: Book
    Payment_method:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string         
      xml:
        name: Payment_method
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag        
    Transasction_details:
      required:
        - title
        - qty
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        title:
          type: string
          example: java itu mudah
        qty:
          type: integer
          example: 1
        price:
          type: integer
          example: 100000
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: Transaction_Detail
    Transasction:
      required:
        - name
        - payment_method
        - total_qty
        - total_price
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: wawan
        payment_method:
          type: string
          example: Debit BRI (1247 0100 5834 534)
        total_qty:
          type: integer
          example: 1
        total_price:
          type: integer
          example: 100000
        status:
          type: string
          description: book status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Transaction
  requestBodies:
    User:
      description: User object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transasction_details'
        application/xml:
          schema:
            $ref: '#/components/schemas/Transasction_details'
      required: true
    Transaction_Detail:
      description: Transaction_Detail object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transasction_details'
        application/xml:
          schema:
            $ref: '#/components/schemas/Transasction_details'
      required: true
    Transaction:
      description: Transaction object that needs to be added to the store, for buys books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transasction'
        application/xml:
          schema:
            $ref: '#/components/schemas/Transasction'
      required: true
    RefreshToken:
      description: RefeshToken object that needs to be refresh the token 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefreshToken'
        application/xml:
          schema:
            $ref: '#/components/schemas/RefreshToken'
      required: true
    Book:
      description: book object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
        application/xml:
          schema:
            $ref: '#/components/schemas/Book'
      required: true
    Payment_method:
      description: payment_method object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment_method'
        application/xml:
          schema:
            $ref: '#/components/schemas/Payment_method'
      required: true
    Category:
      description: category object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
        application/xml:
          schema:
            $ref: '#/components/schemas/Category'
      required: true
    Description:
      description: category object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Description'
        application/xml:
          schema:
            $ref: '#/components/schemas/Description'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
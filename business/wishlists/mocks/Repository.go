// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	wishlists "alterra/business/wishlists"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Repository) GetById(ctx context.Context, id uint) (wishlists.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, uint) wishlists.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(wishlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListWishlist provides a mock function with given fields: ctx, search
func (_m *Repository) GetListWishlist(ctx context.Context, search string) ([]wishlists.Domain, error) {
	ret := _m.Called(ctx, search)

	var r0 []wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) []wishlists.Domain); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wishlists.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertWishlist provides a mock function with given fields: ctx, domain
func (_m *Repository) InsertWishlist(ctx context.Context, domain wishlists.Domain) (wishlists.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, wishlists.Domain) wishlists.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(wishlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, wishlists.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, domain, id
func (_m *Repository) Update(ctx context.Context, domain wishlists.Domain, id uint) (wishlists.Domain, error) {
	ret := _m.Called(ctx, domain, id)

	var r0 wishlists.Domain
	if rf, ok := ret.Get(0).(func(context.Context, wishlists.Domain, uint) wishlists.Domain); ok {
		r0 = rf(ctx, domain, id)
	} else {
		r0 = ret.Get(0).(wishlists.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, wishlists.Domain, uint) error); ok {
		r1 = rf(ctx, domain, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
